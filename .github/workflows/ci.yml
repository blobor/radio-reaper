name: App CI/CD

on: [push]

permissions:
  contents: read

jobs:
  test_and_build:
    name: Test and Build
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Cache .next build
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Test
      run: pnpm test

    - name: Build
      run: pnpm build

    - name: Store artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ github.sha }}
        path: out/
        compression-level: 9
        if-no-files-found: error
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: test_and_build
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    environment:
      name: staging
      url: https://beta.radio.lobor.dev

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ github.sha }}

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload to S3
      run: |
        aws s3 sync $GITHUB_WORKSPACE s3://${{ secrets.AWS_BUCKET }}

    - name: Invalidate cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths '/*'
